#include <functional>
#include <numeric>
#include <chrono> // 包含chrono库
#include "cuda_runtime.h"
#include "device_launch_parameters.h"
#include<iostream>
#include<fstream>
#include<string>
#include <vector>
#include <sstream>
#include <math.h>
#include <algorithm>
#include <cmath> 
#include <stdio.h>
#include <iostream>
#include <fstream>
#include <stdlib.h>
#include <cuda_runtime.h>
using namespace std::chrono; // 命名空间
using namespace std;
#define jing 141
#define wei 141
#define N jing*wei
#define RRR  6381372
#define dx11  1860//232
#define dy22  1610.8//464     1860
__global__ void addArrays(double* x, double* y, double* NN)
{
    double M_PI = 3.14159265358979323846;//定义Π
    double SSS, L0;
    double x11, y22, zz = 160;
    double xiaobo_35[20][2] = {
    { 0.0250000000000000	,0.0596788194444444 },
    { 0.0750000000000000	,0.0217013888888889 },
    { 0.125000000000000	,0.0872395833333333 },
    { 0.175000000000000	,0.0217013888888890 },
    { 0.225000000000000	,0.0596788194444444 },
    { 0.275000000000000	,0.0596788194444445 },
    { 0.325000000000000	,0.0217013888888887 },
    { 0.375000000000000	,0.0872395833333335 },
    { 0.425000000000000	,0.0217013888888887 },
    { 0.475000000000000	,0.0596788194444445 },
    { 0.525000000000000	,0.0596788194444445 },
    { 0.575000000000000	,0.0217013888888887 },
    { 0.625000000000000	,0.0872395833333336 },
    { 0.675000000000000	,0.0217013888888887 },
    { 0.725000000000000	,0.0596788194444445 },
    { 0.775000000000000	,0.0596788194444445 },
    { 0.825000000000000	,0.0217013888888887 },
    { 0.875000000000000	,0.0872395833333336 },
    { 0.925000000000000	,0.0217013888888887 },
    { 0.975000000000000	,0.0596788194444445 }
};
    double xiaobo_45[40][2] = {
        {0.0125000000000000	,0.0298394097222222         },
        {0.0375000000000000	,0.0108506944444445         },
        {0.0625000000000000	,0.0436197916666666         },
        {0.0875000000000000	,0.0108506944444445         },
        {0.112500000000000	,0.0298394097222222         },
        {0.137500000000000	,0.0298394097222223         },
        {0.162500000000000	,0.0108506944444444         },
        {0.187500000000000	,0.0436197916666668         },
        {0.212500000000000	,0.0108506944444444         },
        {0.237500000000000	,0.0298394097222223         },
        {0.262500000000000	,0.0298394097222222         },
        {0.287500000000000	,0.0108506944444444         },
        {0.312500000000000	,0.0436197916666668         },
        {0.337500000000000	,0.0108506944444444         },
        {0.362500000000000	,0.0298394097222222         },
        {0.387500000000000	,0.0298394097222222         },
        {0.412500000000000	,0.0108506944444444         },
        {0.437500000000000	,0.0436197916666668         },
        {0.462500000000000	,0.0108506944444444         },
        {0.487500000000000	,0.0298394097222222         },
        {0.512500000000000	,0.0298394097222221         },
        {0.537500000000000	,0.0108506944444447         },
        {0.562500000000000	,0.0436197916666664         },
        {0.587500000000000	,0.0108506944444447         },
        {0.612500000000000	,0.0298394097222221         },
        {0.637500000000000	,0.0298394097222221         },
        {0.662500000000000	,0.0108506944444447         },
        {0.687500000000000	,0.0436197916666664         },
        {0.712500000000000	,0.0108506944444447         },
        {0.737500000000000	,0.0298394097222221         },
        {0.762500000000000	,0.0298394097222221         },
        {0.787500000000000	,0.0108506944444447         },
        {0.812500000000000	,0.0436197916666664         },
        {0.837500000000000	,0.0108506944444447         },
        {0.862500000000000	,0.0298394097222221         },
        {0.887500000000000	,0.0298394097222221         },
        {0.912500000000000	,0.0108506944444447         },
        {0.937500000000000	,0.0436197916666664         },
        {0.962500000000000	,0.0108506944444447         },
        {0.987500000000000	,0.0298394097222221         } };
    double xiaobo_55[80][2] = {
    {0.00625000000000000,0.0149197048611111},
    {0.0187500000000000	,0.00542534722222224   },
    {0.0312500000000000	,0.0218098958333333    },
    {0.0437500000000000	,0.00542534722222224   },
    {0.0562500000000000	,0.0149197048611111    },
    {0.0687500000000000	,0.0149197048611111    },
    {0.0812500000000000	,0.00542534722222218   },
    {0.0937500000000000	,0.0218098958333334    },
    {0.106250000000000	,0.00542534722222218   },
    {0.118750000000000	,0.0149197048611111    },
    {0.131250000000000	,0.0149197048611111    },
    {0.143750000000000	,0.00542534722222218   },
    {0.156250000000000	,0.0218098958333334    },
    {0.168750000000000	,0.00542534722222218   },
    {0.181250000000000	,0.0149197048611111    },
    {0.193750000000000	,0.0149197048611111    },
    {0.206250000000000	,0.00542534722222218   },
    {0.218750000000000	,0.0218098958333334    },
    {0.231250000000000	,0.00542534722222218   },
    {0.243750000000000	,0.0149197048611111    },
    {0.256250000000000	,0.0149197048611110    },
    {0.268750000000000	,0.00542534722222235   },
    {0.281250000000000	,0.0218098958333332    },
    {0.293750000000000	,0.00542534722222235   },
    {0.306250000000000	,0.0149197048611110    },
    {0.318750000000000	,0.0149197048611110    },
    {0.331250000000000	,0.00542534722222235   },
    {0.343750000000000	,0.0218098958333332    },
    {0.356250000000000	,0.00542534722222235   },
    {0.368750000000000	,0.0149197048611110    },
    {0.381250000000000	,0.0149197048611110    },
    {0.393750000000000	,0.00542534722222235   },
    {0.406250000000000	,0.0218098958333332    },
    {0.418750000000000	,0.00542534722222235   },
    {0.431250000000000	,0.0149197048611110    },
    {0.443750000000000	,0.0149197048611110    },
    {0.456250000000000	,0.00542534722222235   },
    {0.468750000000000	,0.0218098958333332    },
    {0.481250000000000	,0.00542534722222235   },
    {0.493750000000000	,0.0149197048611110    },
    {0.506250000000000	,0.0149197048611111    },
    {0.518750000000000	,0.00542534722222239   },
    {0.531250000000000	,0.0218098958333331    },
    {0.543750000000000	,0.00542534722222239   },
    {0.556250000000000	,0.0149197048611111    },
    {0.568750000000000	,0.0149197048611111    },
    {0.581250000000000	,0.00542534722222239   },
    {0.593750000000000	,0.0218098958333331    },
    {0.606250000000000	,0.00542534722222239   },
    {0.618750000000000	,0.0149197048611111    },
    {0.631250000000000	,0.0149197048611111    },
    {0.643750000000000	,0.00542534722222239   },
    {0.656250000000000	,0.0218098958333331    },
    {0.668750000000000	,0.00542534722222239   },
    {0.681250000000000	,0.0149197048611111    },
    {0.693750000000000	,0.0149197048611111    },
    {0.706250000000000	,0.00542534722222239   },
    {0.718750000000000	,0.0218098958333331    },
    {0.731250000000000	,0.00542534722222239   },
    {0.743750000000000	,0.0149197048611111    },
    {0.756250000000000	,0.0149197048611111    },
    {0.768750000000000	,0.00542534722222239   },
    {0.781250000000000	,0.0218098958333331    },
    {0.793750000000000	,0.00542534722222239   },
    {0.806250000000000	,0.0149197048611111    },
    {0.818750000000000	,0.0149197048611111    },
    {0.831250000000000	,0.00542534722222239   },
    {0.843750000000000	,0.0218098958333331    },
    {0.856250000000000	,0.00542534722222239   },
    {0.868750000000000	,0.0149197048611111    },
    {0.881250000000000	,0.0149197048611111    },
    {0.893750000000000	,0.00542534722222239   },
    {0.906250000000000	,0.0218098958333331    },
    {0.918750000000000	,0.00542534722222239   },
    {0.931250000000000	,0.0149197048611111    },
    {0.943750000000000	,0.0149197048611111    },
    {0.956250000000000	,0.00542534722222239   },
    {0.968750000000000	,0.0218098958333331    },
    {0.981250000000000	,0.00542534722222239   },
    {0.993750000000000	,0.0149197048611111    } };
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < N)
    {
        double ll = 0;
        x11 = x[tid], y22 = y[tid];
        double x1, x2, y1, y2;
        double l0;
        double aaaa = 15;

        for (int b = 0; b < N; b++)
        {
            x2 = x[b] + dx11 / 2;
            x1 = x[b] - dx11 / 2;
            y2 = y[b] + dy22 / 2;
            y1 = y[b] - dy22 / 2;
            double sumll = 0;
            if (b == tid)
            {
                //double sumll = 0;
                //for (int i = 0; i < 30; i++)
                //{
                //    for (int j = 0; j < 30; j++)
                //    {
                //        double x = ((x2 - x1) / 2) * gauss_30coef[i][0] + ((x2 + x1) / 2);
                //        double y = ((y2 - y1) / 2) * gauss_30coef[j][0] + ((y2 + y1) / 2);
                //        double w = gauss_30coef[i][1] * gauss_30coef[j][1];
                //        L0 = sqrt(pow((x11 - x), 2) + pow((y22 - y), 2) + pow(zz, 2));
                //        sumll += w * (3 * pow((zz), 2) - pow(L0, 2)) / (2 * M_PI * pow(L0, 5)) * (x2 - x1) * (y2 - y1) / 4;
                //    }
                //}
                //NN[tid * N + b] = sumll;
            }

            else
            {
                for (int i = 0; i < 6; i++)
                {
                    for (int j = 0; j < 6; j++)
                    {
                        //double x = (x2 - x1) * xiaobo_35[i][0] + x1;
                        //double y = (y2 - y1) * xiaobo_35[j][0] + y1;
                        //            double w = xiaobo_35[i][1]
                        //                     * xiaobo_35[j][1];
                        double x = ((x2 - x1) / 2) * gauss_6coef[i][0] + ((x2 + x1) / 2);
                        double y = ((y2 - y1) / 2) * gauss_6coef[j][0] + ((y2 + y1) / 2);
                        double w = gauss_6coef[i][1] * gauss_6coef[j][1];
                        L0 = sqrt(pow((x11 - x), 2) + pow((y22 - y), 2) + pow(zz, 2));
                        //sumll += w * (3 * pow((x11 - x), 2) - pow(L0, 2)) / (2 * M_PI * pow(L0, 5)) * (x2 - x1) * (y2 - y1) / 4;//Txx
                        //sumll += w * (3 * pow((y22 - y), 2) - pow(L0, 2)) / (2 * M_PI * pow(L0, 5)) * (x2 - x1) * (y2 - y1) / 4;//Tyy
                        sumll += w * (3 * pow((zz), 2) - pow(L0, 2)) / (2 * M_PI * pow(L0, 5)) * (x2 - x1) * (y2 - y1)/4 ;//Tzz
                        //sumll += w * (3 * (x11 - x) * (y22 - y)) / (2 * M_PI * pow(l0, 5)) * (x2 - x1) * (y2 - y1)/4;//Txy
                    }
                }

            }
            NN[tid * N + b] = sumll * 10000;
            //ll = ll+sumll ;
        }
        int n = 1;//1高斯，2小波

        {
            int b = tid;
            x2 = x[b] + dx11 / 2;
            x1 = x[b] - dx11 / 2;
            y2 = y[b] + dy22 / 2;
            y1 = y[b] - dy22 / 2;
            double sumll = 0;
            if (b == tid)
            {
                for (int i = 0; i < 30; i++)
                {
                    for (int j = 0; j < 30; j++)
                    {

                        //double x = (x2 - x1) * xiaobo_105[i][0] + x1;
                        //double y = (y2 - y1) * xiaobo_105[j][0] + y1;
                        //            double w = xiaobo_105[i][1]
                        //                     * xiaobo_105[j][1];
                        double x = ((x2 - x1) / 2) * gauss_30coef[i][0] + ((x2 + x1) / 2);
                        double y = ((y2 - y1) / 2) * gauss_30coef[j][0] + ((y2 + y1) / 2);
                        double w = gauss_30coef[i][1] * gauss_30coef[j][1];
                        L0 = sqrt(pow((x11 - x), 2) + pow((y22 - y), 2) + pow(zz, 2));
                        //sumll += w * (3 * pow((x11 - x), 2) - pow(L0, 2)) / (2 * M_PI * pow(L0, 5)) * (x2 - x1) * (y2 - y1) / 4;//Txx
                        //sumll += w * (3 * pow((y22 - y), 2) - pow(L0, 2)) / (2 * M_PI * pow(L0, 5)) * (x2 - x1) * (y2 - y1) / 4;//Tyy
                        sumll +=  w * (3 * pow((zz), 2) - pow(L0, 2)) / (2 * M_PI * pow(L0, 5)) * (x2 - x1) * (y2 - y1) /4;//Tzz
                        //sumll += w * (3 * (x11 - x) * (y22 - y)) / (2 * M_PI * pow(l0, 5)) * (x2 - x1) * (y2 - y1)/4;//Txy
                    }
                }
            }
            NN[tid * N + b] = sumll * 10000;
            //ll = ll + sumll;
        }
        //NN[tid] = ll;
    }

}

int main()
{
    auto start_time = high_resolution_clock::now(); // 获取开始时间点
    double* x = new double[N], * y = new double[N], *NN = new double[N * N];
    double* dev_x, * dev_y, * dev_NN;
    for (int i = 0; i < wei; i++)
    {
        for (int j = 0; j < jing; j++)
        {
            x[jing * i + j] = dx11 * (j + 1);
        }
    }
    for (int i = 0; i < jing; i++)
    {
        for (int j = 0; j < wei; j++)
        {
            y[jing * j + i] = -dy22 * (j + 1);
        }
    }
    cudaMalloc((void**)&dev_x, N * sizeof(double));
    cudaMalloc((void**)&dev_y, N * sizeof(double));
    cudaMalloc((void**)&dev_NN, (N * N) * sizeof(double));
    cudaMemcpy(dev_x, x, N * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(dev_y, y, N * sizeof(double), cudaMemcpyHostToDevice);
    int threadsPerBlock = 256;
    int blocksPerGrid = (N + threadsPerBlock - 1) / threadsPerBlock;
    addArrays << <blocksPerGrid, threadsPerBlock >> > (dev_x, dev_y, dev_NN);
    cudaMemcpy(NN, dev_NN, (N * N) * sizeof(double), cudaMemcpyDeviceToHost);

    auto end_time0 = high_resolution_clock::now(); // 获取结束时间点
    auto duration0 = duration_cast<microseconds>(end_time0 - start_time); // 计算持续时间
    int sec0;
    sec0 = duration0.count() * 1e-6;
    cout << "计算花费了 " << sec0 << " 秒" << endl;

    ofstream file("141141xy.bin", ios::binary);
    file.write(reinterpret_cast<char*>(NN), (N * N) * sizeof(double));
    file.close();
    cudaFree(dev_x);
    cudaFree(dev_y);
    cudaFree(dev_NN);
    auto end_time1 = high_resolution_clock::now(); // 获取结束时间点
    auto duration1 = duration_cast<microseconds>(end_time1 - start_time); // 计算持续时间
    int sec1;
    sec1 = duration1.count() * 1e-6;
    cout << "计算花费了 " << sec1 << " 秒" << endl;
    return 0;
}